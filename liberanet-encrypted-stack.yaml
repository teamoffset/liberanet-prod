AWSTemplateFormatVersion: '2010-09-09'
Description: 'LiberaNet VPN with Encrypted EBS Storage and Security Best Practices'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
    
  InstanceType:
    Type: String
    Default: t3.medium
    AllowedValues: [t3.small, t3.medium, t3.large, t3.xlarge, t3.2xlarge]
    Description: EC2 instance type
    
  VolumeSize:
    Type: Number
    Default: 30
    MinValue: 20
    MaxValue: 100
    Description: Root volume size in GB
    
  DataVolumeSize:
    Type: Number
    Default: 20
    MinValue: 10
    MaxValue: 50
    Description: Additional encrypted data volume size in GB
    
  AllowedSSHCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR block allowed for SSH access (restrict for security)
    
  DomainName:
    Type: String
    Default: ""
    Description: Domain name for SSL certificate (optional)

Resources:
  # KMS Key for enhanced encryption
  LiberaNetKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'KMS Key for LiberaNet VPN data encryption'
      KeyPolicy:
        Statement:
          - Sid: Enable IAM policies
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow EC2 service
            Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:ReEncrypt*
            Resource: '*'
      KeyRotationStatus: true
      Tags:
        - Key: Name
          Value: LiberaNet-VPN-KMS-Key
        - Key: Purpose
          Value: Data encryption

  LiberaNetKMSKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/liberanet-vpn-encryption
      TargetKeyId: !Ref LiberaNetKMSKey

  # VPC and Networking (optional - uses default VPC if not specified)
  LiberaNetSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for LiberaNet VPN with encrypted storage
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSHCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: LiberaNet-VPN-SG-Encrypted

  # IAM Role for EC2 with necessary permissions
  LiberaNetEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: LiberaNetKMSAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey
                  - kms:ReEncrypt*
                Resource: !GetAtt LiberaNetKMSKey.Arn
        - PolicyName: LiberaNetS3Backup
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${LiberaNetBackupBucket}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Ref LiberaNetBackupBucket

  LiberaNetInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref LiberaNetEC2Role

  # S3 Bucket for encrypted backups
  LiberaNetBackupBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "liberanet-vpn-backups-${AWS::AccountId}-${AWS::Region}"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref LiberaNetKMSKey
            BucketKeyEnabled: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldBackups
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 7
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: LiberaNet-VPN-Backups
        - Key: Environment
          Value: Production

  # EC2 Instance with encrypted storage
  LiberaNetInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Ubuntu 22.04 LTS (update as needed)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SecurityGroupIds:
        - !Ref LiberaNetSecurityGroup
      IamInstanceProfile: !Ref LiberaNetInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp3
            Iops: 3000
            Throughput: 125
            Encrypted: true
            KmsKeyId: !Ref LiberaNetKMSKey
            DeleteOnTermination: true
        - DeviceName: /dev/sdf
          Ebs:
            VolumeSize: !Ref DataVolumeSize
            VolumeType: gp3
            Iops: 3000
            Throughput: 125
            Encrypted: true
            KmsKeyId: !Ref LiberaNetKMSKey
            DeleteOnTermination: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt update && apt upgrade -y
          apt install -y awscli unzip
          
          # Install CloudWatch agent
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/amd64/latest/amazon-cloudwatch-agent.deb
          dpkg -i amazon-cloudwatch-agent.deb
          
          # Configure CloudWatch agent
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'CWEOF'
          {
            "metrics": {
              "namespace": "LiberaNet/VPN",
              "metrics_collected": {
                "cpu": {
                  "measurement": ["cpu_usage_idle", "cpu_usage_iowait", "cpu_usage_user", "cpu_usage_system"],
                  "metrics_collection_interval": 60
                },
                "disk": {
                  "measurement": ["used_percent"],
                  "metrics_collection_interval": 60,
                  "resources": ["*"]
                },
                "diskio": {
                  "measurement": ["io_time"],
                  "metrics_collection_interval": 60,
                  "resources": ["*"]
                },
                "mem": {
                  "measurement": ["mem_used_percent"],
                  "metrics_collection_interval": 60
                }
              }
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/liberanet.log",
                      "log_group_name": "/aws/ec2/liberanet/application",
                      "log_stream_name": "{instance_id}"
                    },
                    {
                      "file_path": "/var/log/liberanet-vpn.log",
                      "log_group_name": "/aws/ec2/liberanet/vpn",
                      "log_stream_name": "{instance_id}"
                    }
                  ]
                }
              }
            }
          }
          CWEOF
          
          # Start CloudWatch agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
          
          # Format and mount encrypted data volume
          mkdir -p /opt/liberanet-data
          mkfs -t ext4 /dev/xvdf
          mount /dev/xvdf /opt/liberanet-data
          echo '/dev/xvdf /opt/liberanet-data ext4 defaults,nofail 0 2' >> /etc/fstab
          
          # Set environment variables
          echo "BACKUP_BUCKET=${LiberaNetBackupBucket}" >> /etc/environment
          echo "KMS_KEY_ID=${LiberaNetKMSKey}" >> /etc/environment
          echo "DOMAIN_NAME=${DomainName}" >> /etc/environment
          
          # Log deployment start
          echo "$(date): Starting LiberaNet VPN deployment with encryption" >> /var/log/deployment.log
          
      Tags:
        - Key: Name
          Value: LiberaNet-VPN-Encrypted
        - Key: Environment
          Value: Production
        - Key: Backup
          Value: Daily
        - Key: Encryption
          Value: Enabled

  # Elastic IP for consistent public IP
  LiberaNetEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref LiberaNetInstance
      Tags:
        - Key: Name
          Value: LiberaNet-VPN-EIP

  # CloudWatch Log Groups
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/liberanet/application
      RetentionInDays: 30
      KmsKeyId: !GetAtt LiberaNetKMSKey.Arn

  VPNLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/ec2/liberanet/vpn
      RetentionInDays: 30
      KmsKeyId: !GetAtt LiberaNetKMSKey.Arn

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-HighCPU"
      AlarmDescription: "High CPU usage detected"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref LiberaNetInstance
      TreatMissingData: notBreaching

  LowDiskSpaceAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-LowDiskSpace"
      AlarmDescription: "Low disk space detected"
      MetricName: disk_used_percent
      Namespace: LiberaNet/VPN
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: !Ref LiberaNetInstance
      TreatMissingData: notBreaching

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref LiberaNetInstance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"
  
  PublicIP:
    Description: Public IP address (Elastic IP)
    Value: !Ref LiberaNetEIP
    Export:
      Name: !Sub "${AWS::StackName}-PublicIP"
  
  KMSKeyId:
    Description: KMS Key ID for encryption
    Value: !Ref LiberaNetKMSKey
    Export:
      Name: !Sub "${AWS::StackName}-KMSKey"
  
  BackupBucket:
    Description: S3 bucket for encrypted backups
    Value: !Ref LiberaNetBackupBucket
    Export:
      Name: !Sub "${AWS::StackName}-BackupBucket"
  
  SSHCommand:
    Description: SSH command to connect to the instance
    Value: !Sub "ssh -i your-key.pem ubuntu@${LiberaNetEIP}"
  
  WebsiteURL:
    Description: Website URL
    Value: !Sub "http://${LiberaNetEIP}"
  
  HTTPSWebsiteURL:
    Description: HTTPS Website URL (after SSL setup)
    Value: !Sub 
      - "https://${Domain}"
      - Domain: !If [HasDomain, !Ref DomainName, !Ref LiberaNetEIP]
    Condition: HasDomain

  DeploymentInstructions:
    Description: Instructions for completing the deployment
    Value: !Sub |
      1. SSH to instance: ssh -i your-key.pem ubuntu@${LiberaNetEIP}
      2. Upload deployment files: scp -r liberanet-prod ubuntu@${LiberaNetEIP}:~/
      3. Run deployment: cd liberanet-prod && sudo ./deploy-ec2.sh
      4. Configure domain DNS (if applicable): ${DomainName}
      5. Setup SSL: sudo /opt/liberanet/setup-ssl.sh ${DomainName}

Conditions:
  HasDomain: !Not [!Equals [!Ref DomainName, ""]]
